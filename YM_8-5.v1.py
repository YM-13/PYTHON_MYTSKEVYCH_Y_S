"""
Продолжить работу над первым заданием. Разработайте методы, которые отвечают за приём
оргтехники на склад и передачу в определённое подразделение компании. Для хранения
данных о наименовании и количестве единиц оргтехники, а также других данных, можно
использовать любую подходящую структуру (например, словарь).
"""
"""
Создайте собственный класс-исключение, который должен проверять содержимое списка на
наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у
пользователя данные и заполнять список необходимо только числами. Класс-исключение
должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом
скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа
элемента. Вносить его в список, только если введено число. Класс-исключение должен не
позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class MyException_num:

    def __init__(self, data_str):
        self.data_str = data_str

    def in_list(data_str):
        list_of_num = []
        stop = ['stop']
        lis = data_str.split(' ')
        count = len(lis)
        while count != stop:
            n = lis.pop(0)
            if n == n.isdigit():

            if lis == stop:
                break
            for i in lis:
                if i == stop:
                    break
                i = float(i)
                list_of_num.append(i)
                count -= 1
            lis = (input('Введите данные: ')).split(' ')
            count = len(lis)
            continue
        return list_of_num


h = input('Введите данные: ')
data_1 = MyException_num.in_list(h)
print(data_1)
